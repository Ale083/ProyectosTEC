/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.supervivenciaenlaisla2024130345;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Image;
import java.util.ArrayList;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.OverlayLayout;

/**
 *
 * @author Proyecto Diseño
 */
public class Juego extends javax.swing.JFrame {
private JPanel[][] panelesMapa; //array para almacenar las casillas en gui
private JLabel[][] labelsImagenes; 
private JLabel[][] labelsTexto;
private	ArrayList<Personaje> personajes;
private ArrayList<PersonajeThread> threads;
private Mapa mapaTablero;
private RefrescarMapaThread refrescarMapaThread;

	/**
	 * Creates new form Juego
	 */
	public Juego() {
		initComponents();
		personajes = new ArrayList<Personaje>();
		threads = new ArrayList<PersonajeThread>();
		mapaTablero = new Mapa(26,26);
		inicializarMapaGraficamente(mapaTablero);
		refrescarMapaThread = new RefrescarMapaThread(mapaTablero,panelesMapa,jPanel1,labelsImagenes,labelsTexto);
		refrescarMapaThread.start();
		inicializarCoordenadasX();
		inicializarCoordenadasY();
		for (PersonajeThread thread : threads) {
			thread.start();
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        pnlCoordsX = new javax.swing.JPanel();
        pnlCoordsY = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setLayout(new java.awt.GridLayout(26, 26));

        pnlCoordsX.setBackground(new java.awt.Color(51, 51, 51));
        pnlCoordsX.setLayout(new java.awt.GridLayout(1, 26));

        pnlCoordsY.setBackground(new java.awt.Color(51, 51, 51));
        pnlCoordsY.setLayout(new java.awt.GridLayout(26, 1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(pnlCoordsY, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlCoordsX, javax.swing.GroupLayout.PREFERRED_SIZE, 832, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 832, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(141, 388, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlCoordsY, javax.swing.GroupLayout.PREFERRED_SIZE, 832, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlCoordsX, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 832, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	/**
	 * @param args the command line arguments
	 */
	private void inicializarMapaGraficamente(Mapa mapa) {
        panelesMapa = new JPanel[mapa.getMapa().length][mapa.getMapa()[0].length];
		labelsImagenes = new JLabel[mapa.getMapa().length][mapa.getMapa()[0].length];   
		labelsTexto = new JLabel[mapa.getMapa().length][mapa.getMapa()[0].length];
		
		//Poner un 4x4 de casillas ya descubiertas en el centro.
		int centroFila = mapa.getMapa().length / 2;
		int centroColumna = mapa.getMapa()[0].length / 2;
		int counter = 0;
		for (int fila = centroFila - 2; fila <= centroFila + 1; fila++) {
			for (int columna = centroColumna - 2; columna <= centroColumna + 1; columna++) {
				switch (counter) {
					case 0:
						añadirPersonaje(fila, columna, new Explorador(columna, fila));
						break;
					case 2:
						añadirPersonaje(fila, columna, new Cazador(columna, fila));
						break;
					case 5:
						añadirPersonaje(fila, columna, new Recolector(columna, fila));
						break;
					case 7:
						añadirPersonaje(fila, columna, new Constructor(columna, fila));
						break;
					case 10:
						añadirPersonaje(fila, columna, new Curandero(columna, fila));
						break;
					case 12:
						añadirPersonaje(fila, columna, new Cientifico(columna, fila));
						break;
					case 14:  // TEST GRAFICO RECURSO TODO: QUITARLO.
						mapa.getCasilla(fila, columna).añadirRecurso(new Recurso("madera"));
						break;
				}
				counter++;
				mapa.getCasilla(fila, columna).descubrir();
			}
		} 
		
        for (int fila = 0; fila < mapa.getMapa().length; fila++) {
            for (int columna = 0; columna < mapa.getMapa()[0].length; columna++) {
                JPanel panelCasilla = new JPanel();
                panelCasilla.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
				panelCasilla.setLayout(new OverlayLayout(panelCasilla));
				
				JLabel labelPersonas = new JLabel("");  
				labelsTexto[fila][columna] = labelPersonas; 
				labelPersonas.setOpaque(false);
				panelCasilla.add(labelPersonas);
				labelPersonas.setAlignmentX(Component.CENTER_ALIGNMENT);  
				labelPersonas.setAlignmentY(0.3f); //0.5f lo centra, para hacerlo un poco para abajo puse 0.3f
				
				JLabel labelImagen = new JLabel();
				labelsImagenes[fila][columna] = labelImagen;
				panelCasilla.add(labelImagen);
				labelImagen.setOpaque(false);
				labelImagen.setAlignmentX(Component.CENTER_ALIGNMENT); 
				labelImagen.setAlignmentY(Component.CENTER_ALIGNMENT);
				
				 
				

				
						
				panelCasilla.setPreferredSize(new java.awt.Dimension(32, 32));
				panelCasilla.setMinimumSize(new java.awt.Dimension(32, 32));
				panelCasilla.setMaximumSize(new java.awt.Dimension(32, 32));
				
                int f = fila;
                int c = columna;

                
				
                panelCasilla.addMouseListener(new java.awt.event.MouseAdapter() {
                    @Override
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        int x = evt.getX();
                        int y = evt.getY();
						Casilla casilla = mapa.getCasilla(f, c);
						casilla.descubrir();
						casilla.setRefugio(new Refugio());
						casilla.añadirPersonaje(new Curandero(c,f));
						System.out.println(casilla.getPersonajes().getFirst().getxActual());
                        System.out.println("Casilla: (" + f + ", " + c + ")");
                        System.out.println("Coordenadas dentro del JPanel: (" + x + ", " + y + ")");
						int width = panelCasilla.getWidth(); 
						int height = panelCasilla.getHeight();
						System.out.println("Dimensiones de la casilla: " + width + "x" + height + " píxeles");
						Component[] componentes = panelCasilla.getComponents();
						for (Component componente : componentes) {
							System.out.println(componente);
							System.out.println("");
						}
						personajes.getLast().setDestino(c, f);
					}
                });

                
                panelesMapa[fila][columna] = panelCasilla;

                
                this.jPanel1.add(panelCasilla);
            }
        }
        this.jPanel1.revalidate(); //necesarios para actualizar cambios cuando se usa grid layout
        this.jPanel1.repaint();
    }
	
	private void inicializarCoordenadasX() {
    
    for (int i = 0; i < 26; i++) {
        JLabel coordLabel = new JLabel(String.valueOf(i), JLabel.CENTER); 
		coordLabel.setForeground(Color.white);
		coordLabel.setFont(new java.awt.Font("Bauhaus 93", 0, 16)); 
        pnlCoordsX.add(coordLabel); 

    }

    
    pnlCoordsX.revalidate();
    pnlCoordsX.repaint();
}
	
	private void inicializarCoordenadasY() {
    
    for (int i = 0; i < 26; i++) {
        JLabel coordLabel = new JLabel(String.valueOf(i), JLabel.CENTER);
		coordLabel.setForeground(Color.white);
		coordLabel.setFont(new java.awt.Font("Bauhaus 93", 0, 16)); 
        pnlCoordsY.add(coordLabel); 

    }

    
    pnlCoordsY.revalidate();
    pnlCoordsY.repaint();
}

	private void añadirPersonaje(int fila, int columna, Personaje personaje){
		mapaTablero.getCasilla(fila, columna).añadirPersonaje(personaje);
		personajes.add(personaje);
		threads.add(new PersonajeThread(mapaTablero,personaje));
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel pnlCoordsX;
    private javax.swing.JPanel pnlCoordsY;
    // End of variables declaration//GEN-END:variables
}


/*
Explorador:
	~Descansar maybe
	2 textfields para coords
	En inventario meter comer y compartir.
	Maybe png + nombre
	Vida y energia.
	Mover
	Explorar
	Recolectar

Cazador:
	~Descansar maybe
	2 textfields para coords
	En inventario meter comer y compartir.
	Maybe png + nombre
	Vida y energia.
	Mover
	Cazar (junto a coords).
	Defender (junto a coords).

Recolector:
	~Descansar maybe
	2 textfields para coords
	En inventario meter comer y compartir.
	Maybe png + nombre
	Vida y energia.
	Mover
	Recolectar

Constructor:
	~Descansar maybe
	2 textfields para coords
	En inventario meter comer y compartir.
	Maybe png + nombre
	Vida y energia.
	Mover
	Construir Refugio
	Reparar Refugio
	
Curandero:
	~Descansar maybe
	2 textfields para coords
	En inventario meter comer y compartir.
	Maybe png + nombre
	Vida y energia.
	Mover
	Curar Personaje -> healea personaje
	Hacer remedio a personaje -> le quita la enfermedad a x personaje, cuesta plantas y energia ambos.
	Recolectar

Cientifico:
	~Descansar maybe
	2 textfields para coords
	En inventario meter comer y compartir.
	Maybe png + nombre
	Vida y energia.
	Mover
	Hacer remedio a personaje -> le quita la enfermedad a x personaje.

Random que cada dia los personajes puedan enfermarse.


Poner las acciones especificas a cada personaje en accionar.
A cada tipo de personaje, ponerle un atributo como por ejemplo "boolean cazando y boolean defendiendo".
Entonces en accionar poner como if(cazando) ... O if defendiendo.
Y poner accionar en el threadPersonaje, cuando ya para de moverse.






*/